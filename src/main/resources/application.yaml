debug: false # spring boot의 각종 debug 로고 활성화 여부 (기본 설정: logback) - OFF
management.endpoints.web.exposure.include: "*" # actuator 엔드포인트 중 감춰져있는 기능을 모두 활성화
logging:
  level: # 구체적으로 언급하고싶은 로그 레벨들을 명시한다.
    com.fastcampus.projectboard: debug # 해당 패키지에서 발생하는 모든 log를 debug레벨로 보겠다.
    org.springframework.web.servlet: debug # spring web 디버그 로그 off후 serlet관련 req res 로그만 디버그로 추출.
    org.hibernate.type.descriptor.sql.BasicBinder: trace # JPA기술을 사용할 때 Query log를 디버그 log로 관찰 - 안에 들어가는 바인딩 파라머터 ?로 출력 -> ?를 관찰할 수 있게 해주는 로깅 레벨

spring:
  datasource:
    # --- --- --- --- MySQL --- --- --- ---
    url: jdbc:mysql://localhost:3306/board
    username: yjh
    password: 1234
    driver-class-name: com.mysql.cj.jdbc.Driver # MySql 8버전의 JDBC 드라이버 (cj)

    # --- --- --- --- H2DB --- --- --- ---
#    url: jdbc:h2:mem:testdb
#    username: sa
#    driver-class-name: org.h2.Driver

  jpa:
    defer-datasource-initialization: true # springboot 2.4 신기능 true- 테스트용 데이터베이스 데이터를 생성할 수 있게끔 한다. (resources/data.sql 파일을 활용한다.)
    hibernate.ddl-auto: create # Entity로부터 테이블 데이터를 유추하여 자동으로 DDL을 생성한다. (Create Table)
    show-sql: true # SQL 문장 Debug 로그 출력.
    properties:
      hibernate.format_sql: true # 한줄로 출력되는 디버그 쿼리문을 (개행 등)포매팅 한다
      hibernate.default_batch_fetch_size: 100 # 최대 100개단위 벌크 select - 연관관계 매핑되어있는 쿼리를 사용할 때 한번에 벌크로 조회해올수 있게끔 만들어준다. (n+1 -> in쿼리로 조회된다...)
  h2.console.enabled: false # h2 DB 콘솔 사용 여부
  sql.init.mode: always # resources/data.sql 작동 시점 룰 (always : 모든 테스트 기간에 데이터를 밀어 넣게된다.)

--- #yaml은 ---를 기준으로 여러개의 도큐먼트를 분류하여 만들 수 있다. (spring profile 새로 생성)

spring:
  config.activate.on-profile: testdb # 과거 profiles.active - testdb 프로파일이 activated 되어있을때 현재위치의 프로퍼티를 읽게됨.
#  datasource:
#    url: jdbc:h2:mem:board;mode=mysql
#    driverClassName: org.h2.Driver
#  sql.init.mode: always
#  test.database.replace: none
